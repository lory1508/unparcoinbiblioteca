import { Command, Flags } from '@oclif/core';
import { readBlueprintOnDisk } from '../../actions/blueprints/blueprint.js';
import { getStack } from '../../actions/blueprints/stacks.js';
import { formatResourceTree } from '../../utils/display/blueprints-formatting.js';
import { bold, green, red, yellow } from '../../utils/display/colors.js';
import { formatDate, formatDuration } from '../../utils/display/dates.js';
export default class Info extends Command {
    static description = 'Show information about a Blueprint';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> --id abc123',
    ];
    static flags = {
        id: Flags.string({
            description: 'Stack ID to show info for (defaults to current stack)',
            required: false,
        }),
    };
    async run() {
        const { flags } = await this.parse(Info);
        const { errors, deployedStack, projectId } = await readBlueprintOnDisk({ getStack: true });
        if (errors.length > 0) {
            // printErrors(errors)
            this.log('Blueprint parse errors:');
            console.dir(errors, { depth: null });
            return;
        }
        if (!projectId)
            this.error('Project resource not found in blueprint');
        let stack = deployedStack;
        if (flags.id) {
            const { ok, stack: foundStack, error } = await getStack({ stackId: flags.id, projectId });
            if (!ok)
                this.error(error || 'Failed to get stack');
            stack = foundStack;
        }
        else if (!stack) {
            this.error('No stack found');
        }
        if (!stack)
            this.error('Stack not found. Is it deployed?');
        try {
            this.log(`Stack name: ${bold(stack.name)}`);
            this.log(`Stack ID: ${yellow(stack.id)}`);
            if (stack.createdAt) {
                this.log(`Created: ${formatDate(stack.createdAt)}`);
            }
            if (stack.updatedAt) {
                this.log(`Updated: ${formatDate(stack.updatedAt)}`);
            }
            if (stack.recentOperation) {
                const operation = stack.recentOperation;
                if (operation.id) {
                    this.log(`Recent Operation <${yellow(operation.id)}>:`);
                }
                if (operation.status) {
                    const operationColor = operation.status === 'COMPLETED' ? green : red;
                    const status = operation.status || 'UNKNOWN';
                    this.log(`  Status: ${operationColor(status)}`);
                }
                if (operation.createdAt) {
                    this.log(`  Started: ${formatDate(operation.createdAt)}`);
                }
                if (operation.status === 'COMPLETED' && operation.completedAt && operation.createdAt) {
                    this.log(`  Completed: ${formatDate(operation.completedAt)}`);
                    this.log(`  Duration: ${yellow(formatDuration(operation.createdAt, operation.completedAt))}`);
                }
            }
            this.log('');
            if (stack.resources) {
                formatResourceTree(stack.resources, this.log.bind(this));
            }
        }
        catch (err) {
            if (err instanceof Error) {
                this.log(`Error: ${err.message}`);
            }
        }
    }
}

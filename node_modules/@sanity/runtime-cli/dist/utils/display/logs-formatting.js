import { blue, bold, green, yellow } from './colors.js';
export function formatLogEntry(log, isNewest = false) {
    const date = new Date(log.timestamp);
    const time = date.toLocaleTimeString();
    const day = date.toLocaleDateString();
    return `${isNewest ? `${green('>')} ` : ''}${bold(day)} ${yellow(time)} ${log.message}`;
}
export function formatRecentLogs(logs) {
    if (logs.length === 0)
        return 'No recent logs found';
    const sortedLogs = [...logs].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
    const recentLogs = sortedLogs.slice(-10);
    let result = '\nMost recent logs:\n';
    for (const log of recentLogs) {
        result += `  ${formatLogEntry(log)}\n`;
    }
    return result;
}
export function organizeLogsByDay(logs) {
    const logsByDay = new Map();
    for (const log of logs) {
        const date = new Date(log.timestamp);
        const day = date.toLocaleDateString();
        if (!logsByDay.has(day)) {
            logsByDay.set(day, []);
        }
        logsByDay.get(day)?.push(log);
    }
    return logsByDay;
}
export function formatLogsByDay(logsByDay) {
    let result = '';
    const sortedDays = Array.from(logsByDay.keys()).sort((a, b) => {
        return new Date(a).getTime() - new Date(b).getTime();
    });
    for (const day of sortedDays) {
        result += `${blue('Date:')} ${bold(day)}\n`;
        const dayLogs = logsByDay.get(day) || [];
        dayLogs.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
        for (const [i, log] of dayLogs.entries()) {
            const date = new Date(log.timestamp);
            const time = date.toLocaleTimeString();
            const isLast = i === dayLogs.length - 1;
            result += `  ${isLast ? '└─' : '├─'} ${yellow(time)} ${log.message}\n`;
        }
        // new line between days
        result += '\n';
    }
    return result;
}

import { blue, bold, boldnblue, green, yellow } from './colors.js';
import { formatDate } from './dates.js';
export function formatTitle(title, name) {
    return `${boldnblue(title)} ${bold(`"${name}"`)}`;
}
export function formatStacksList(stacks) {
    if (!stacks || stacks.length === 0) {
        return 'No stacks found';
    }
    let result = '\nFound Stacks:\n';
    for (const name of stacks) {
        result += `  ${name}\n`;
    }
    return result;
}
export function formatResourceTree(resources, logger) {
    if (!resources || resources.length === 0) {
        logger('  No resources in this stack');
        return;
    }
    logger(`${blue('Stack Resources')} [${resources.length}]`);
    const functionResources = resources.filter((r) => r.type?.startsWith('sanity.function.'));
    const otherResources = resources.filter((r) => !r.type?.startsWith('sanity.function.'));
    const hasOtherResources = otherResources.length > 0;
    if (functionResources.length > 0) {
        logger(`  ${hasOtherResources ? '├─' : '└─'} ${bold('Functions')} [${functionResources.length}]`);
        for (const [i, fn] of functionResources.entries()) {
            const isLast = i === functionResources.length - 1;
            const prefix = hasOtherResources ? '│' : ' ';
            const connector = isLast ? '└─' : '├─';
            const name = green(fn.displayName || fn.name);
            const externalId = fn.externalId ? `Fn<${yellow(fn.externalId)}>` : '';
            logger(`  ${prefix}   ${connector} "${name}" ${externalId}`);
        }
    }
    if (hasOtherResources) {
        logger(`  └─ ${bold('Other Resources')} [${otherResources.length}]`);
        for (const [i, other] of otherResources.entries()) {
            const isLast = i === otherResources.length - 1;
            logger(`       ${isLast ? '└─' : '├─'} "${yellow(other.displayName || other.name || other.src)}"`);
        }
    }
}
export function formatStackInfo(stack, isCurrentStack = false) {
    let result = '';
    const stackName = isCurrentStack ? boldnblue(stack.name) : bold(stack.name);
    result += `${stackName} <${yellow(stack.id)}>${isCurrentStack ? ' (current)' : ''}\n`;
    if (stack.createdAt) {
        result += `  Created: ${formatDate(stack.createdAt)}\n`;
    }
    if (stack.updatedAt) {
        result += `  Updated: ${formatDate(stack.updatedAt)}\n`;
    }
    result += `  ${stack.resources.length} resource${stack.resources.length === 1 ? '' : 's'}\n\n`;
    return result;
}
export function formatStacksListing(stacks, currentStackId) {
    if (!stacks || stacks.length === 0) {
        return 'No stacks found';
    }
    let result = '';
    for (const stack of stacks) {
        const isCurrentStack = currentStackId === stack.id;
        result += formatStackInfo(stack, isCurrentStack);
    }
    return result;
}

import { RendererElement } from 'vue';
import { RendererNode } from 'vue';
import { VNode } from 'vue';

export declare type BlocksComponents = {
    [K in StrapiNode['type']]: (props: GetPropsFromNode<Extract<StrapiNode, {
        type: K;
    }>>) => VNode;
};

export declare type BlocksContent = RootNode[];

declare interface BlocksRendererProps {
    content: BlocksContent;
    blocks?: Partial<BlocksComponents>;
    modifiers?: Partial<ModifiersComponents>;
}

declare interface CodeBlockNode {
    type: 'code';
    children: DefaultInlineNode[];
}

declare type DefaultInlineNode = TextInlineNode | LinkInlineNode;

declare type GetPropsFromNode<T> = Omit<T, 'type' | 'children'> & {
    children?: VNode;
    plainText?: T extends {
        type: 'code';
    } ? string : never;
};

declare interface HeadingBlockNode {
    type: 'heading';
    level: 1 | 2 | 3 | 4 | 5 | 6;
    children: DefaultInlineNode[];
}

declare interface ImageBlockNode {
    type: 'image';
    image: {
        name: string;
        alternativeText?: string | null;
        url: string;
        caption?: string | null;
        width: number;
        height: number;
        formats?: Record<string, unknown>;
        hash: string;
        ext: string;
        mime: string;
        size: number;
        previewUrl?: string | null;
        provider: string;
        provider_metadata?: unknown | null;
        createdAt: string;
        updatedAt: string;
    };
    children: [{
        type: 'text';
        text: '';
    }];
}

declare interface LinkInlineNode {
    type: 'link';
    url: string;
    children: TextInlineNode[];
}

declare interface ListBlockNode {
    type: 'list';
    format: 'ordered' | 'unordered';
    children: (ListItemInlineNode | ListBlockNode)[];
}

declare interface ListItemInlineNode {
    type: 'list-item';
    children: DefaultInlineNode[];
}

declare type Modifier = Exclude<keyof TextInlineNode, 'type' | 'text'>;

export declare type ModifiersComponents = {
    [K in Modifier]: (props: GetPropsFromNode<Extract<StrapiNode, {
        type: K;
    }>>) => VNode;
};

declare type NonTextInlineNode = Exclude<DefaultInlineNode, TextInlineNode> | ListItemInlineNode;

declare interface ParagraphBlockNode {
    type: 'paragraph';
    children: DefaultInlineNode[];
}

declare interface QuoteBlockNode {
    type: 'quote';
    children: DefaultInlineNode[];
}

declare type RootNode = ParagraphBlockNode | QuoteBlockNode | CodeBlockNode | HeadingBlockNode | ListBlockNode | ImageBlockNode;

export declare const StrapiBlocks: (props: BlocksRendererProps) => VNode<RendererNode, RendererElement, {
    [key: string]: any;
}>;

declare type StrapiNode = RootNode | NonTextInlineNode;

declare interface TextInlineNode {
    type: 'text';
    text: string;
    bold?: boolean;
    italic?: boolean;
    underline?: boolean;
    strikethrough?: boolean;
    code?: boolean;
}

export { }
